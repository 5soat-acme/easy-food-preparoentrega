name: CI/CD Easy Food PreparoEntrega

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'src/**'
  pull_request:
    paths:
      - 'src/**'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      AWS_ACCESSKEY: ${{ SECRETS.AWS_ACCESS_KEY_ID }}
      AWS_SECRETKEY: ${{ SECRETS.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSIONTOKEN: ${{ SECRETS.AWS_SESSION_TOKEN }}
      AWS_REGION: "us-east-1"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.x'

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Test with Coverage
        run: |
          dotnet test --configuration Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
          dotnet tool install --global dotnet-reportgenerator-globaltool
          reportgenerator -reports:**/coverage.opencover.xml -targetdir:coveragereport -reporttypes:Html

      - name: SonarCloud Scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet tool install --global dotnet-sonarscanner && \
          export PATH="$PATH:/home/runner/.dotnet/tools" && \
          dotnet sonarscanner begin \
              /k:"5soat-acme_easy-food-preparoentrega" \
              /o:"5soat-acme" \
              /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
              /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" \
              /d:sonar.host.url="https://sonarcloud.io" \
              /d:sonar.exclusions="src/**/Migrations/**,test/**"  && \
          dotnet build  && \
          dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build Docker image
      run: docker build -t 5soatacme/easy-food-preparoentrega:latest . -f "./src/Presentation/EF.Api/Dockerfile"

    - name: Login to DockerHub
      if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      run: docker login -u 5soatacme -p ${{ SECRETS.DOCKERHUB_TOKEN }}
    
    - name: Push image to DockerHub
      if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      run: docker push 5soatacme/easy-food-preparoentrega:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        AWS-ACCESS-KEY-ID: ${{ SECRETS.AWS_ACCESS_KEY_ID }}
        AWS-SECRET-ACCESS-KEY: ${{ SECRETS.AWS_SECRET_ACCESS_KEY }}
        AWS-SESSION-TOKEN: ${{ SECRETS.AWS_SESSION_TOKEN }}
        AWS-REGION: "us-east-1"

    - name: Deploy to EKS
      run: |
        aws eks update-kubeconfig --region us-east-1 --name easy-food
        kubectl rollout restart deployment easy-food-preparoentrega-api